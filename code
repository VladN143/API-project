#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <ArduinoJson.h>
#include <WiFi.h>
#include <HTTPClient.h>
// BLE server name
#define bleServerName ""
bool deviceConnected = false;
StaticJsonDocument<200> doc;
// se genereaza un UUID unic
#define SERVICE_UUID "3b2e224c-fd5e-11ed-be56-0242ac120002"
#define CHARACTERISTIC_UUID "649a108a-dc93-40ed-aa7d-0a3009df589d"
// Wi-Fi network parameters
String ssid = "";
String password = "";
bool connected_WiFi;
#define CONNECT_TIMEOUT 15000
long connectStart = 0;
String teamId = "A30";

// se defineste o caracteristică cu proprietățile: Citire, Scriere (cu răspuns), Notificare
BLECharacteristic characteristic(
 CHARACTERISTIC_UUID,
 BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE |
BLECharacteristic::PROPERTY_NOTIFY
);
// Sunt definite diverse constante și variabile, inclusiv numele serverului pentru BLE,
//parametrii rețelei Wi-Fi (SSID și parolă), un indicator pentru verificarea conectivității
//dispozitivului și UUID-urile pentru serviciul și caracteristica BLE.
BLEDescriptor *characteristicDescriptor = new BLEDescriptor(BLEUUID((uint16_t)0x2902));
class MyServerCallbacks: public BLEServerCallbacks {
 void onConnect(BLEServer* pServer) {
 deviceConnected = true;
 Serial.println("Device connected");
 };
 void onDisconnect(BLEServer* pServer) {
 deviceConnected = false;
 Serial.println("Device disconnected");
 pServer->startAdvertising();
 }
};
class CharacteristicsCallbacks: public BLECharacteristicCallbacks {
 void onWrite(BLECharacteristic *characteristic) {
 // se obtine valoarea caracteristică trimisă din aplicație, conform specificațiilor
 std::string data = characteristic->getValue();
 Serial.println(data.c_str()); // <-- mesajul ce reprezinta actiunea realizata in aplicatie este
afisata in consola seriala

 DeserializationError err = deserializeJson(doc, data);
 String action = doc["action"];
 //scanează pentru rețele Wi-Fi disponibile și trimite detaliile rețelei (SSID, puterea
semnalului, tipul de criptare) înapoi la aplicația mobilă.
 if(action=="getNetworks")
 {
 String message_teamId = doc["teamId"];
 String teamId = message_teamId;
 int n = WiFi.scanNetworks();
 if (n == 0)
 {
 Serial.println("No network");
 }
 else
 {
 for (int i = 0; i < n; i++)
 {
 DynamicJsonDocument network(1024);
 network["ssid"] = WiFi.SSID(i);
 network["strength"] = WiFi.RSSI(i);
 network["encryption"] = WiFi.encryptionType(i);
 network["teamId"] = teamId;

 String jsonString;
 serializeJson(network, jsonString);
 characteristic->setValue(jsonString.c_str());
 characteristic->notify();

 delay(100);
 }
 }
 }
 // încearcă să se conecteze la o rețea Wi-Fi folosind SSID-ul și parola primite.
 //Verifică starea conexiunii și trimite un răspuns cu starea conectată la aplicația mobilă.
 else if(action=="connect")
 {
 String message_ssid = doc["ssid"];
 ssid = message_ssid;
 String message_password = doc["password"];
 password = message_password;
 WiFi.begin(ssid.c_str(), password.c_str());
 int time = 0;
 while (WiFi.status() != WL_CONNECTED)
 {
 Serial.println(".");
 delay(500);
 time += 500;
 if (time > 10000)
 break;
 }
 bool wifi_connected;
 if (WiFi.status() != WL_CONNECTED)
 {

 wifi_connected = false;
 }
 else
 {
 wifi_connected = true;
 }
 DynamicJsonDocument doc(200);
 doc["ssid"] = ssid;
 doc["connected"] = wifi_connected;
 doc["teamId"] = teamId;
 String output;
 serializeJson(doc, output);
 characteristic->setValue(output.c_str());
 characteristic->notify();
 }
 //efectuează o solicitare HTTP GET către o anumită adresă URL și preia date.
 //Datele preluate sunt apoi analizate și sunt extrase anumite câmpuri.
 //Câmpurile extrase sunt trimise ca răspuns la aplicația mobilă prin caracteristica
 else if (action == "getData")
 {
 String URL = "http://proiectia.bogdanflorea.ro/api/cheapshark/deals";
 HTTPClient client;
 client.begin(URL);
 int statusCode = client.GET();
 if (statusCode != 200)
 Serial.println("Connection failed");
 else

 {
 String data = client.getString();
 Serial.println(data);
 DynamicJsonDocument doc(16000);
 DeserializationError err = deserializeJson(doc, data);
 JsonArray recordsArray = doc.as<JsonArray>();
 DynamicJsonDocument finalData(16000);
 for (JsonObject record : recordsArray)
 {
 String id = record["dealID"];
 finalData["id"] = id;
 String name = record["title"];
 finalData["name"] = name;
 String image = record["thumb"];
 finalData["image"] = image;
 finalData["teamId"] = teamId.c_str();
 String response;
 serializeJson(finalData, response);
 Serial.println(response);
 characteristic->setValue(response.c_str());
 characteristic->notify();
 }
 }

 client.end();

 }
 // efectuează o solicitare HTTP GET către o anumită adresă URL,
 //preia date și analizează răspunsul,
 //extrage anumite câmpuri și le trimite ca răspuns la aplicația mobilă.
 else if (action == "getDetails")
 {
 String id = doc["id"];
 String URL = "http://proiectia.bogdanflorea.ro/api/cheapshark/deal?dealID=" + id;
 HTTPClient client;
 client.begin(URL);
 int statusCode = client.GET();
 if (statusCode != 200)
 Serial.println("Error on sending GET request");
 else
 {
 String data = client.getString();
 Serial.print(data);
 DynamicJsonDocument doc(16000);
 DeserializationError err = deserializeJson(doc, data);
 DynamicJsonDocument finalData(16000);

 String id = doc["dealID"];
 finalData["id"] = id;
 String image = doc["thumb"];
 finalData["image"] = image;
 String name = doc["title"];
 finalData["name"] = name;
 finalData["teamId"] = teamId.c_str();


 String description;
 //internal name

 String internalName = doc["internalName"];
 description += ("internalName: " + internalName + ".\n\n");
 //metacriticlink
 String meta = doc["metacriticLink"];
 description += ("metacriticLink: " + meta + ".\n\n");
 //storeID
 String storeID = doc["storeID"];
 description += ("storeID: " + storeID + ".\n\n");
 //gameID

 String gameID = doc["gameID"];
 description += ("gameID: " + gameID + ".\n\n");
 //salePrice
 String salePrice = doc["salePrice"];
 description += ("salePrice: " + salePrice + ".\n\n");
 //normalPrice
 String normalPrice = doc["normalPrice"];
 description += ("normalPrice: " + normalPrice + ".\n\n");
 //isOnSale

 String isOnSale = doc["isOnSale"];
 description += ("isOnSale: " + isOnSale + ".\n\n");
 //savings
 String savings = doc["savings"];
 description += ("savings: " + savings + ".\n\n");
 //metacriticScore
 //String metacriticScore = doc["metacriticScore"];

 //description += ("metacriticScore: " + metacriticScore + ".\n\n");
 //steamRatingText
 //String steamRatingText = doc["steamRatingText"];
 //description += ("steamRatingText: " + steamRatingText + ".\n\n");
 //steamRatingPercent
 //String steamRatingPercent = doc["steamRatingPercent"];
 //description += ("steamRatingPercent: " + steamRatingPercent + ".\n\n");
 //steamRatingCount
 //String steamRatingCount = doc["steamRatingCount"];
 //description += ("steamRatingCount: " + steamRatingCount + ".\n\n");
 //steamAppID
 String steamAppID = doc["steamAppID"];
 description += ("steamAppID: " + steamAppID + ".\n\n");
 //releaseDate
 String releaseDate = doc["releaseDate"];
 description += ("releaseDate: " + releaseDate + ".\n\n");

 //lastChange
 String lastChange = doc["lastChange"];
 description += ("lastChange: " + lastChange + ".\n\n");
 //dealRating
 String dealRating = doc["dealRating"];
 description += ("dealRating: " + dealRating + ".\n\n");
 finalData["description"] = description;

 String response;
 serializeJson(finalData, response);
 characteristic->setValue(response.c_str());
 characteristic->notify();
 }
 client.end();
 }
 }
};
BLEServer *pServer;

void setup() {
 // Start serial communication
 Serial.begin(115200);
 // se creaza device-ul BLE
 BLEDevice::init(bleServerName);
 // se creaza serverul BLE
 pServer = BLEDevice::createServer();
 // se seteaza serverul callbacks
 pServer->setCallbacks(new MyServerCallbacks());
 // se creaza BLE Service
 BLEService *bleService = pServer->createService(SERVICE_UUID);
 // se creaza BLE characteristics and descriptors
 bleService->addCharacteristic(&characteristic);
 characteristic.addDescriptor(characteristicDescriptor);
 // se seteaza chacrateristic callbacks
 characteristic.setCallbacks(new CharacteristicsCallbacks());

 // Start the service
 bleService->start();
 // Start advertising
 BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
 pAdvertising->addServiceUUID(SERVICE_UUID);

 pServer->getAdvertising()->start();
 Serial.println("Waiting a client connection to notify...");
}
void loop()
{
}
